diff --git a/node_modules/@greenwood/cli/src/config/rollup.config.js b/node_modules/@greenwood/cli/src/config/rollup.config.js
index 8aa6f56..3c52b4f 100644
--- a/node_modules/@greenwood/cli/src/config/rollup.config.js
+++ b/node_modules/@greenwood/cli/src/config/rollup.config.js
@@ -375,7 +375,9 @@ const getRollupConfigForApis = async (compilation) => {
     plugins: [
       greenwoodJsonLoader(),
       greenwoodResourceLoader(compilation),
-      nodeResolve(),
+      nodeResolve({
+        exportConditions: ['default', 'module', 'import', 'node']
+      }),
       commonjs(),
       greenwoodImportMetaUrl(compilation)
     ]
@@ -401,7 +403,8 @@ const getRollupConfigForSsr = async (compilation, input) => {
       // https://github.com/lit/lit/issues/449
       // https://github.com/ProjectEvergreen/greenwood/issues/1118
       nodeResolve({
-        preferBuiltins: true
+        preferBuiltins: true,
+        exportConditions: ['default', 'module', 'import', 'node']
       }),
       commonjs(),
       greenwoodImportMetaUrl(compilation),
diff --git a/node_modules/@greenwood/cli/src/lib/execute-route-module.js b/node_modules/@greenwood/cli/src/lib/execute-route-module.js
index 483696f..2720aa7 100644
--- a/node_modules/@greenwood/cli/src/lib/execute-route-module.js
+++ b/node_modules/@greenwood/cli/src/lib/execute-route-module.js
@@ -15,7 +15,7 @@ async function executeRouteModule({ moduleUrl, compilation, page = {}, prerender
     data.html = html;
   } else {
     const module = await import(moduleUrl).then(module => module);
-    const { prerender = false, getTemplate = null, getBody = null, getFrontmatter = null } = module;
+    const { prerender = false, getTemplate = null, getBody = null, getFrontmatter = null, isolation } = module;
 
     if (module.default) {
       const { html } = await renderToString(new URL(moduleUrl), false, request);
@@ -35,7 +35,9 @@ async function executeRouteModule({ moduleUrl, compilation, page = {}, prerender
       data.frontmatter = await getFrontmatter(compilation, page);
     }
 
+    // TODO cant we get these from just pulling from the file during the graph phase?
     data.prerender = prerender;
+    data.isolation = isolation;
   }
 
   return data;
diff --git a/node_modules/@greenwood/cli/src/lib/resource-utils.js b/node_modules/@greenwood/cli/src/lib/resource-utils.js
index a3d71e5..e29abc5 100644
--- a/node_modules/@greenwood/cli/src/lib/resource-utils.js
+++ b/node_modules/@greenwood/cli/src/lib/resource-utils.js
@@ -124,7 +124,9 @@ async function trackResourcesForRoute(html, compilation, route) {
   const scripts = await Promise.all(root.querySelectorAll('script')
     .filter(script => (
       isLocalLink(script.getAttribute('src')) || script.rawText)
-      && script.rawAttrs.indexOf('importmap') < 0)
+      && script.rawAttrs.indexOf('importmap') < 0
+      && script.getAttribute('type') !== 'application/json'
+    )
     .map(async(script) => {
       const src = script.getAttribute('src');
       const optimizationAttr = script.getAttribute('data-gwd-opt');
diff --git a/node_modules/@greenwood/cli/src/lib/ssr-route-worker-prod.js b/node_modules/@greenwood/cli/src/lib/ssr-route-worker-prod.js
new file mode 100644
index 0000000..831fa8e
--- /dev/null
+++ b/node_modules/@greenwood/cli/src/lib/ssr-route-worker-prod.js
@@ -0,0 +1,14 @@
+// https://github.com/nodejs/modules/issues/307#issuecomment-858729422
+import { parentPort } from 'worker_threads';
+
+async function executeModule({ routeModuleUrl, request, compilation }) {
+  const { handler } = await import(routeModuleUrl);
+  const response = await handler(request, compilation);
+  const html = await response.text();
+
+  parentPort.postMessage(html);
+}
+
+parentPort.on('message', async (task) => {
+  await executeModule(task);
+});
\ No newline at end of file
diff --git a/node_modules/@greenwood/cli/src/lib/templating-utils.js b/node_modules/@greenwood/cli/src/lib/templating-utils.js
index 9503e6a..97a4841 100644
--- a/node_modules/@greenwood/cli/src/lib/templating-utils.js
+++ b/node_modules/@greenwood/cli/src/lib/templating-utils.js
@@ -189,18 +189,18 @@ async function getUserScripts (contents, compilation) {
   // TODO get rid of lit polyfills in core
   // https://github.com/ProjectEvergreen/greenwood/issues/728
   // https://lit.dev/docs/tools/requirements/#polyfills
-  if (process.env.__GWD_COMMAND__ === 'build') { // eslint-disable-line no-underscore-dangle
-    const userPackageJson = await getPackageJson(context);
-    const dependencies = userPackageJson?.dependencies || {};
-    const litPolyfill = dependencies && dependencies.lit
-      ? '<script src="/node_modules/lit/polyfill-support.js"></script>\n'
-      : '';
-
-    contents = contents.replace('<head>', `
-      <head>
-        ${litPolyfill}
-    `);
-  }
+  // if (process.env.__GWD_COMMAND__ === 'build') { // eslint-disable-line no-underscore-dangle
+  //   const userPackageJson = await getPackageJson(context);
+  //   const dependencies = userPackageJson?.dependencies || {};
+  //   const litPolyfill = dependencies && dependencies.lit
+  //     ? '<script src="/node_modules/lit/polyfill-support.js"></script>\n'
+  //     : '';
+
+  //   contents = contents.replace('<head>', `
+  //     <head>
+  //       ${litPolyfill}
+  //   `);
+  // }
 
   return contents;
 }
diff --git a/node_modules/@greenwood/cli/src/lifecycles/bundle.js b/node_modules/@greenwood/cli/src/lifecycles/bundle.js
index e5a28fd..9caf3aa 100644
--- a/node_modules/@greenwood/cli/src/lifecycles/bundle.js
+++ b/node_modules/@greenwood/cli/src/lifecycles/bundle.js
@@ -7,6 +7,29 @@ import { checkResourceExists, mergeResponse, normalizePathnameForWindows } from
 import path from 'path';
 import { rollup } from 'rollup';
 
+async function interceptPage(url, request, plugins, body) {
+  console.log({ plugins })
+  let response = new Response(body, {
+    headers: new Headers({ 'Content-Type': 'text/html' })
+  });
+
+  for (const plugin of plugins) {
+    if (plugin.shouldIntercept && await plugin.shouldIntercept(url, request, response)) {
+      response = await plugin.intercept(url, request, response);
+    }
+  }
+
+  return response;
+}
+
+function getPluginInstances(compilation) {
+  return [...compilation.config.plugins]
+    .filter(plugin => plugin.type === 'resource' && plugin.name !== 'plugin-node-modules:resource')
+    .map((plugin) => {
+      return plugin.provider(compilation);
+    });
+}
+
 async function emitResources(compilation) {
   const { outputDir } = compilation.context;
   const { resources, graph } = compilation;
@@ -202,9 +225,20 @@ async function bundleSsrPages(compilation) {
         staticHtml = data.template ? data.template : await getPageTemplate(staticHtml, compilation.context, template, []);
         staticHtml = await getAppTemplate(staticHtml, compilation.context, imports, [], false, title);
         staticHtml = await getUserScripts(staticHtml, compilation);
+        // TODO seems like we are missing general purpose intercepting and optimization when bundling SSR pages
+        staticHtml = await (await interceptPage(new URL(`http://localhost:8080${route}`), new Request(new URL(`http://localhost:8080${route}`)), getPluginInstances(compilation), staticHtml)).text();
         staticHtml = await (await htmlOptimizer.optimize(new URL(`http://localhost:8080${route}`), new Response(staticHtml))).text();
         staticHtml = staticHtml.replace(/[`\\$]/g, '\\$&'); // https://stackoverflow.com/a/75688937/417806
 
+        // TODO prune graph of hydration data
+        const g = [ ...compilation.graph ];
+
+        g.forEach(page => {
+          delete page.pageData;
+        })
+
+        compilation.graph = g;
+
         // better way to write out this inline code?
         await fs.writeFile(entryFileUrl, `
           import { executeRouteModule } from '${normalizePathnameForWindows(executeModuleUrl)}';
diff --git a/node_modules/@greenwood/cli/src/lifecycles/graph.js b/node_modules/@greenwood/cli/src/lifecycles/graph.js
index ae82285..4a9a1b6 100644
--- a/node_modules/@greenwood/cli/src/lifecycles/graph.js
+++ b/node_modules/@greenwood/cli/src/lifecycles/graph.js
@@ -49,6 +49,7 @@ const generateGraph = async (compilation) => {
             let customData = {};
             let filePath;
             let prerender = true;
+            let isolation = false;
 
             /*
              * check if additional nested directories exist to correctly determine route (minus filename)
@@ -131,6 +132,7 @@ const generateGraph = async (compilation) => {
 
                 worker.on('message', async (result) => {
                   prerender = result.prerender;
+                  isolation = result.isolation ?? isolation;
 
                   if (result.frontmatter) {
                     result.frontmatter.imports = result.frontmatter.imports || [];
@@ -220,7 +222,8 @@ const generateGraph = async (compilation) => {
               template,
               title,
               isSSR: !isStatic,
-              prerender
+              prerender,
+              isolation
             });
           }
         }
diff --git a/node_modules/@greenwood/cli/src/lifecycles/serve.js b/node_modules/@greenwood/cli/src/lifecycles/serve.js
index 6787503..f54a373 100644
--- a/node_modules/@greenwood/cli/src/lifecycles/serve.js
+++ b/node_modules/@greenwood/cli/src/lifecycles/serve.js
@@ -2,9 +2,10 @@ import fs from 'fs/promises';
 import { hashString } from '../lib/hashing-utils.js';
 import Koa from 'koa';
 import { koaBody } from 'koa-body';
-import { checkResourceExists, mergeResponse, transformKoaRequestIntoStandardRequest } from '../lib/resource-utils.js';
+import { checkResourceExists, mergeResponse, transformKoaRequestIntoStandardRequest, requestAsObject } from '../lib/resource-utils.js';
 import { Readable } from 'stream';
 import { ResourceInterface } from '../lib/resource-interface.js';
+import { Worker } from 'worker_threads';
 
 async function getDevServer(compilation) {
   const app = new Koa();
@@ -294,10 +295,44 @@ async function getHybridServer(compilation) {
       const request = transformKoaRequestIntoStandardRequest(url, ctx.request);
 
       if (!config.prerender && matchingRoute.isSSR && !matchingRoute.prerender) {
-        const { handler } = await import(new URL(`./__${matchingRoute.filename}`, outputDir));
-        const response = await handler(request, compilation);
+        let html;
+
+        if (matchingRoute.isolation) {
+          console.log('run in isolation mode!', { matchingRoute });
+
+          await new Promise(async (resolve, reject) => {
+            const worker = new Worker(new URL('../lib/ssr-route-worker-prod.js', import.meta.url));
+            // TODO "faux" new Request here, a better way?
+            const request = await requestAsObject(new Request(url));
+
+            worker.on('message', async (result) => {
+              html = result;
+
+              resolve();
+            });
+            worker.on('error', reject);
+            worker.on('exit', (code) => {
+              if (code !== 0) {
+                reject(new Error(`Worker stopped with exit code ${code}`));
+              }
+            });
+
+            worker.postMessage({
+              routeModuleUrl: new URL(`./__${matchingRoute.filename}`, outputDir).href,
+              request,
+              compilation: JSON.stringify(compilation),
+            });
+          });
+        } else {
+          const { handler } = await import(new URL(`./__${matchingRoute.filename}`, outputDir));
+          const response = await handler(request, compilation);
 
-        ctx.body = Readable.from(response.body);
+          html = Readable.from(response.body);
+        }
+
+        // console.log({ html });
+
+        ctx.body = html;
         ctx.set('Content-Type', 'text/html');
         ctx.status = 200;
       } else if (isApiRoute) {
diff --git a/node_modules/@greenwood/cli/src/plugins/resource/plugin-standard-html.js b/node_modules/@greenwood/cli/src/plugins/resource/plugin-standard-html.js
index 8f06225..9cc2fd9 100644
--- a/node_modules/@greenwood/cli/src/plugins/resource/plugin-standard-html.js
+++ b/node_modules/@greenwood/cli/src/plugins/resource/plugin-standard-html.js
@@ -115,6 +115,14 @@ class StandardHtmlResource extends ResourceInterface {
           if (result.template) {
             ssrTemplate = result.template;
           }
+
+          if (result.hydrate) {
+            matchingRoute.hydrate = result.hydrate;
+            matchingRoute.pageData = result.pageData;
+
+            console.log('Update Page', this.compilation.graph.find((node) => node.route === pathname));
+          }
+
           if (result.body) {
             ssrBody = result.body;
           }
@@ -201,6 +209,20 @@ class StandardHtmlResource extends ResourceInterface {
       }
     }
 
+    if (matchingRoute.hydrate && matchingRoute.pageData) {
+      const id = '__GWD_HYDRATION_DATA__';
+      const { pageData } = matchingRoute;
+      
+      console.log('hydrate with page data =>', { pageData });
+
+      body = body.replace('</head>', `
+        <script type="application/json" id="${id}">
+          ${JSON.stringify(pageData)}
+        </script>
+        </head>
+      `);
+    }
+
     // give the user something to see so they know it works, if they have no content
     if (body.indexOf('<content-outlet></content-outlet>') > 0) {
       body = body.replace('<content-outlet></content-outlet>', `
