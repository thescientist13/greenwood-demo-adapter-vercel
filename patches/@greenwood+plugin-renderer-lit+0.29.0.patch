diff --git a/node_modules/@greenwood/plugin-renderer-lit/src/execute-route-module.js b/node_modules/@greenwood/plugin-renderer-lit/src/execute-route-module.js
index 5e73f75..ae958dd 100644
--- a/node_modules/@greenwood/plugin-renderer-lit/src/execute-route-module.js
+++ b/node_modules/@greenwood/plugin-renderer-lit/src/execute-route-module.js
@@ -1,30 +1,16 @@
-// this needs to come first
-import { render } from '@lit-labs/ssr/lib/render-with-global-dom-shim.js';
-import { Buffer } from 'buffer';
+import { render } from '@lit-labs/ssr';
+import { collectResult } from '@lit-labs/ssr/lib/render-result.js'
 import { html } from 'lit';
 import { unsafeHTML } from 'lit-html/directives/unsafe-html.js';
-import { Readable } from 'stream';
-
-async function streamToString (stream) {
-  const chunks = [];
-
-  for await (let chunk of stream) {
-    chunks.push(Buffer.from(chunk));
-  }
-
-  return Buffer.concat(chunks).toString('utf-8');
-}
-
-async function getTemplateResultString(template) {
-  return await streamToString(Readable.from(render(template)));
-}
 
 async function executeRouteModule({ moduleUrl, compilation, page, prerender, htmlContents, scripts }) {
   const data = {
     template: null,
     body: null,
     frontmatter: null,
-    html: null
+    html: null,
+    hydrate: false,
+    pageData: {},
   };
 
   // prerender static content
@@ -35,28 +21,30 @@ async function executeRouteModule({ moduleUrl, compilation, page, prerender, htm
 
     const templateResult = html`${unsafeHTML(htmlContents)}`;
 
-    data.html = await getTemplateResultString(templateResult);
+    data.html = await collectResult(render(templateResult));
   } else {
     const module = await import(moduleUrl).then(module => module);
-    const { getTemplate = null, getBody = null, getFrontmatter = null } = module;
+    const { getTemplate = null, getBody = null, getFrontmatter = null, hydration = false, loader } = module;
 
-    if (module.default && module.tagName) {
-      const { tagName } = module;
-      const templateResult = html`
-        ${unsafeHTML(`<${tagName}></${tagName}>`)}
-      `;
+    if (hydration) {
+      data.hydrate = true;
+    }
+
+    if (loader) {
+      data.pageData = await loader(); // request, compilation, etc can go here
+      console.log(data.pageData);
+    }
 
-      data.body = await getTemplateResultString(templateResult);
-    } else if (getBody) {
-      const templateResult = await getBody(compilation, page);
+    if (getBody) {
+      const templateResult = await getBody(compilation, page, data.pageData);
 
-      data.body = await getTemplateResultString(templateResult);
+      data.body = await collectResult(render(templateResult));
     }
 
     if (getTemplate) {
       const templateResult = await getTemplate(compilation, page);
 
-      data.template = await getTemplateResultString(templateResult);
+      data.template = await collectResult(render(templateResult));
     }
 
     if (getFrontmatter) {
diff --git a/node_modules/@greenwood/plugin-renderer-lit/src/index.js b/node_modules/@greenwood/plugin-renderer-lit/src/index.js
index e4e190b..cf65488 100755
--- a/node_modules/@greenwood/plugin-renderer-lit/src/index.js
+++ b/node_modules/@greenwood/plugin-renderer-lit/src/index.js
@@ -1,14 +1,74 @@
+
+// import { checkResourceExists } from '../../lib/resource-utils.js';
+// import fs from 'fs/promises';
+import { ResourceInterface } from '@greenwood/cli/src/lib/resource-interface.js';
+
+class LitHydrationResource extends ResourceInterface {
+  constructor(compilation, options) {
+    super(compilation, options);
+    // this.extensions = ['html'];
+    // this.contentType = 'text/html';
+    // this.libPath = '@greenwood/router/router.js';
+  }
+
+  // assumes Greenwood's standard-html plugin has tracked this metadata
+  // during resource serve lifecycle
+  async shouldIntercept(url, request, response) {
+    const { pathname } = url;
+    const matchingRoute = this.compilation.graph.find((node) => node.route === pathname) || {};
+    const { hydrate, pageData } = matchingRoute;
+
+    return hydrate && pageData;
+  }
+
+  async intercept(url, request, response) {
+    console.log('SHOULD intercept', { url });
+    let body = await response.text();
+
+    // TODO have to manually set module-shim?
+    body = body.replace('<head>', `
+      <head>
+        <!-- this needs to come first before any userland code -->
+        <script type="module-shim" src="/node_modules/@lit-labs/ssr-client/lit-element-hydrate-support.js"></script>
+    `);
+
+
+    // TODO full hydration implementation?
+    // <script type="module" defer>
+    //   // https://lit.dev/docs/ssr/client-usage/
+    //   import { render } from 'lit';
+    //   import { hydrate } from '@lit-labs/ssr-client'; // this will need to be in users package.json and / or import map
+    //   import { getBody } from '../src/pages/products.js';
+
+    //   globalThis.document.addEventListener('DOMContentLoaded', () => {
+    //     const hydrationData = JSON.parse(document.getElementById('__GWD_HYDRATION_DATA__')?.textContent || '{"__noData__": true}')
+    //     console.log('lets get hydrated!', { hydrationData });
+
+    //     if(!hydrationData.__noData__) {
+    //       hydrate(getBody({}, {}, hydrationData), window.document.body);
+    //     }
+    //   });
+    // </script>
+
+    return new Response(body);
+  }
+}
+
 const greenwoodPluginRendererLit = (options = {}) => {
-  return {
+  return [{
     type: 'renderer',
-    name: 'plugin-renderer-lit',
+    name: 'plugin-renderer-lit:renderer',
     provider: () => {
       return {
         executeModuleUrl: new URL('./execute-route-module.js', import.meta.url),
         prerender: options.prerender
       };
     }
-  };
+  }, {
+    type: 'resource',
+    name: 'plugin-renderer-lit:resource',
+    provider: (compilation, options) => new LitHydrationResource(compilation, options)
+  }];
 };
 
 export {
